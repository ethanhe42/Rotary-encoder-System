#include "all.h"

#define CAN1_BAUDRATE 1000

//是否使能相应can总线，及其FIFO
#define USE_CAN1_R0	1
#define USE_CAN1_R1	1

void Can_NVIC_Config(void)
{
	NVIC_InitTypeDef  NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
#if  USE_CAN1_R0
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructure);
#endif
#if  USE_CAN1_R1
	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_Init(&NVIC_InitStructure);
#endif
}

void Can_GPIO_Config(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	/* Configure CAN1 IOs **********************************************/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
#if USE_CAN1_R0 || USE_CAN1_R1
	/* Configure CAN RX and TX pins */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	         //PA11:CAN1-RX 
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;			   //输入上拉
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;					 //PA12:CAN1-TX 
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;			 //复用模式
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);	
#endif
}

void CAN_CAN_Config(void)
{
	CAN_InitTypeDef        CAN_InitStructure;
	
	/* Enable CAN clock */
#if USE_CAN1_R0 || USE_CAN1_R1
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1,ENABLE);
	CAN_DeInit(CAN1);
#endif

	/* CAN cell init */
	CAN_StructInit(&CAN_InitStructure);

	CAN_InitStructure.CAN_TTCM=DISABLE;//失能时间触发通讯模式
	CAN_InitStructure.CAN_ABOM=DISABLE;//失能自动离线管理
	CAN_InitStructure.CAN_AWUM=DISABLE;//失能自动唤醒模式
	CAN_InitStructure.CAN_NART=DISABLE;//失能非自动重传输模式,即自动重传
	CAN_InitStructure.CAN_RFLM=DISABLE;//失能接收FIFO锁定模式,即FIFO溢出时新数据覆盖
	CAN_InitStructure.CAN_TXFP=ENABLE;//失能发送FIFO优先级,报文顺序由发送顺序决定 DISABLE:ID决定
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;//正常模式 

	CAN_InitStructure.CAN_SJW=CAN_SJW_1tq;		   //BTR-SJW 重新同步跳跃宽度 1个时间单元
	CAN_InitStructure.CAN_BS1=CAN_BS1_2tq;		   //BTR-TS1 时间段1 占用了2个时间单元
	CAN_InitStructure.CAN_BS2=CAN_BS2_3tq;		   //BTR-TS1 时间段2 占用了3个时间单元
	
	//总线波特率,波特率计算请参见 F1手册“22.7.7 Bit timing”
	//此处，APB1时钟为72M状态，虽然手册上说，APB1只能最大为36M
#if CAN1_BAUDRATE == 1000 /* 1MBps */
  CAN_InitStructure.CAN_Prescaler =12;			   //BTR-BRP 波特率分频器  定义了时间单元的时间长度 72/(1+2+3)/12=1Mbps
#elif CAN1_BAUDRATE == 500 /* 500KBps */
  CAN_InitStructure.CAN_Prescaler =24;
#elif CAN1_BAUDRATE == 250 /* 250KBps */
  CAN_InitStructure.CAN_Prescaler =48;
#elif CAN1_BAUDRATE == 125 /* 125KBps */
  CAN_InitStructure.CAN_Prescaler =96;
#endif 

#if USE_CAN1_R0 || USE_CAN1_R1
	CAN_Init(CAN1, &CAN_InitStructure);	
#endif
}

void Can_FILTER_Config(void)
{
	uint8_t i=0;
	uint8_t can1_filter = 0;
	uint16_t id_temp;
	
	CAN_FilterInitTypeDef  CAN_FilterInitStructure;
	
	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdList;
	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_16bit;
	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
	for(i=0;i<Can_Data_Num;i++)
	{
		if(Can_Database[i].Data_type==WRITE_ONLY)
		{
			CAN_FilterInitStructure.CAN_FilterNumber = can1_filter;
			can1_filter++;
			id_temp = (uint16_t)(Can_Database[i].Data_ID)<<5;
			CAN_FilterInitStructure.CAN_FilterIdHigh = id_temp;
			CAN_FilterInitStructure.CAN_FilterIdLow = id_temp;
			CAN_FilterInitStructure.CAN_FilterMaskIdHigh = id_temp;
			CAN_FilterInitStructure.CAN_FilterMaskIdLow = id_temp;
			CAN_FilterInitStructure.CAN_FilterFIFOAssignment = Can_Database[i].Fifo_num;
			
			CAN_FilterInit(&CAN_FilterInitStructure);
		}
	}
}

void Can_IT_Config(void)
{
#if  USE_CAN1_R0
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
#endif
#if  USE_CAN1_R1
	CAN_ITConfig(CAN1, CAN_IT_FMP1, ENABLE);
#endif
}

void Can1_Init(void)
{
	Hash_Table_init();
	Can_NVIC_Config();
	Can_GPIO_Config();
	CAN_CAN_Config();
	Can_FILTER_Config();
	Can_IT_Config();
}

/*can总线接收时判断有点多，望大家见谅
由于can总线挂载设备较多，每块板子都有各自的程序，所有板子都不出
问题的概率较小。Can_Database数据库是外设与主控通信的公共信息，外
设与主控的数据库必须完全统一。否则，就会造成通信故障。在接收时，
进行判断可以快速发现两板之间的信息不统一问题。
*/
	
//主控向GPS板发送的命令
void USB_LP_CAN1_RX0_IRQHandler(void)
{
	uint8_t i;
	CanRxMsg   RxMessage;
	
	CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
	if(HASH_TABLE[RxMessage.StdId] != 255)
	{
		if(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_length == RxMessage.DLC)
			if(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_type == WRITE_ONLY)
				if(Can_Database[HASH_TABLE[RxMessage.StdId]].Channel == 1)
					if(Can_Database[HASH_TABLE[RxMessage.StdId]].Fifo_num == CAN_Filter_FIFO0)
					{
						for(i=0;i<RxMessage.DLC;i++)
							(*(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_ptr+i)) = RxMessage.Data[i];
						Can_Database[HASH_TABLE[RxMessage.StdId]].MenuFunc();
					}
						
	}else
	{
		LED4_on;
	}
}

//主控向GPS板发送的数据
void CAN1_RX1_IRQHandler(void)
{
	uint8_t i;
	CanRxMsg   RxMessage;
	
	CAN_Receive(CAN1, CAN_FIFO1, &RxMessage);
	if(HASH_TABLE[RxMessage.StdId] != 255)
	{
		if(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_length == RxMessage.DLC)
			if(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_type == WRITE_ONLY)
				if(Can_Database[HASH_TABLE[RxMessage.StdId]].Channel == 1)
					if(Can_Database[HASH_TABLE[RxMessage.StdId]].Fifo_num == CAN_Filter_FIFO1)
					{
						for(i=0;i<RxMessage.DLC;i++)
							(*(Can_Database[HASH_TABLE[RxMessage.StdId]].Data_ptr+i)) = RxMessage.Data[i];
						Can_Database[HASH_TABLE[RxMessage.StdId]].MenuFunc();
					}
	}else
	{
		LED4_on;
	}
}

void Can_SendData(CanTxMsg* TxM)
{
	while(CAN_Transmit(CAN1,TxM)==CAN_NO_MB);
}

